import numpy as np
from matplotlib import pyplot as plt
import time
import random
import math
from functools import reduce


def one_bezier_curve(a, b, t):
    """
    一阶贝塞尔曲线
    :param a:
    :param b:
    :param t:
    :return:
    """
    return (1 - t) * a + t * b


# xs表示原始数据
# n表示阶数
# k表示索引
def n_bezier_curve(xs, n, k, t):
    """
    n阶贝塞尔算法
    :param xs:
    :param n:
    :param k:
    :param t:
    :return:
    """
    if n == 1:
        return one_bezier_curve(xs[k], xs[k + 1], t)
    else:
        return (1 - t) * n_bezier_curve(xs, n - 1, k, t) + t * n_bezier_curve(xs, n - 1, k + 1, t)


def n3_bezier_curve(xs, t):
    """
    三阶贝塞尔曲线算法
    :param xs:
    :param t:
    :return:
    """
    return ((1 - t) ** 3) * xs[0] + 3 * t * ((1 - t) ** 2) * xs[1] + 3 * (t ** 2) * (1 - t) * xs[2] + (t ** 3) * xs[3]


def two_average(sum_num=100, n=100):
    """
    二分均值法对线段进行一百次划分，产生随机的位移值，总和为1
    :param sum_num:
    :param n:
    :return:
    """
    res = []
    k = n
    sum = 0  # 为值的总和
    round_num = n  # 剩余线段数
    while k > 1:
        current_num = sum_num  # 当前剩余的值，初始值为money
        for i in range(1, n):
            res_num = random.uniform(0.0, (2 * (current_num / round_num)))
            res.append(res_num)
            current_num -= res_num
            round_num -= 1
            sum += res_num
            k -= 1
            if k == 1:  # 最后一段，获得剩余的所有值
                res.append(sum_num - sum)

    def displace(sum_num, displacement):
        """
        对位移值进行累加，产生不均等精度,但总和为1
        :param displacement:
        :return:
        """
        result_displace = []
        num = 0
        for i in range(len(displacement)):
            res_sum = displacement[i] + num
            num = res_sum
            result_displace.append(round(res_sum / 100, 10))
        return result_displace

    return displace(sum_num, res)


def distance_point(x, y):
    """
    计算两点之间的距离，用以控制精度和坐标点
    :return:
    """
    dist = math.sqrt((x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2)
    point_num = len(bresenham(x, y))
    return point_num


def slope(a, b):
    """两点之间的斜率"""
    if not (a[0] - b[0]):
        return 0
    k = (a[1] - b[1]) / (a[0] - b[0])
    return k


def bresenham(x, y):
    """
    计算亮点之间
    计算机图形学-bresenham算法绘制两点之间的 直线
    :param x: 传入第一个点的坐标 type === tuple
    :param y: 传入第二个点的坐标 type === tuple
    :return:
    """
    sort_res = False
    if x[0] > y[0]:
        sort_res = True
        x, y = y, x
    k = slope(x, y)
    x0 = x[0]
    y0 = x[1]
    x1 = y[0]
    y1 = y[1]
    d = 0.5 - k
    res = []
    if k < 0:
        d = k - 0.
        while x0 < x1:
            if d <= 0:
                d += k - 0.5
                x0, y0 = x0 + 2, y0 - 1
            else:
                d += k
                x0, y0 = x0 + 1, y0
            res.append((x0, y0))
    else:
        while x0 < x1:
            if d <= 0:
                d += 0.5 - k
                x0, y0 = x0 + 1, y0 + 1
            else:
                d -= k
                x0, y0 = x0 + 1, y0
            res.append((x0, y0))
    if sort_res:
        return res[::-1]
    return res


def bezier_curve(xs, ys, b_xs, b_ys, num):
    n = len(xs) - 1
    t = two_average(n=num)
    print(t)
    for each in t:
        y = int(round(n_bezier_curve(ys, n, 0, each)))
        x = int(round(n_bezier_curve(xs, n, 0, each)))
        # x = int(round(n3_bezier_curve(xs, each)))
        # y = int(round(n3_bezier_curve(ys, each)))
        # if 0 > x or x > 320 or 0 > y or y > 160:
        #     continue
        b_xs.append(x)
        b_ys.append(y)
    b_xs.insert(0, xs[0])
    b_ys.insert(0, ys[0])


def bezier_curve1(xs, ys, num, b_xy):
    n = len(xs) - 1
    t_step = 1.0 / (num - 1)
    t = np.arange(0.0, 1 + t_step, t_step)
    # print(t)
    for each in t:
        b_xy.append((int(n_bezier_curve(xs, n, 0, each)), int(n_bezier_curve(ys, n, 0, each))))


def run_track_bezier(track):
    xs = [point[0] for point in track]
    ys = [point[1] for point in track]
    num = distance_point(track[0], track[-1])
    b_xs = []
    b_ys = []
    num = int(num * 3.2) # 坐标点数量控制
    bezier_curve(xs, ys, b_xs, b_ys, num)
    res__ = tuple(zip(b_xs, b_ys))
    return res__


def plt_show(pos_track):
    x = [_[0] for _ in pos_track]
    y = [_[1] for _ in pos_track]

    plt.figure('Scatter fig')
    ax = plt.gca()
    # 设置x轴、y轴名称
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.xaxis.set_ticks_position('top')
    ax.invert_yaxis()

    ax.set_ylim((160, 0))
    ax.set_xlim((0, 320))

    ax.scatter(x, y, c='r', s=10, alpha=0.5)
    plt.show()


# 测试代码
if __name__ == '__main__':
    res_ = run_track_bezier([(50, 50), (200, 50)])
    print(res_)
    plt_show(res_)
    # plt_show([(161, 119), (161, 119), (162, 119), (162, 119), (163, 119), (163, 119), (164, 119), (165, 119), (165, 119), (167, 119), (168, 119), (168, 119), (170, 118), (171, 118), (172, 118), (173, 118), (173, 118), (174, 118), (175, 118), (175, 118), (176, 118), (176, 118), (177, 118), (177, 118), (178, 118), (178, 118), (179, 118), (179, 118), (180, 118), (180, 118), (180, 118), (181, 118), (181, 118), (181, 118), (181, 118), (182, 118), (182, 118), (182, 118), (182, 118), (183, 118), (183, 118), (183, 118), (183, 118), (183, 118), (184, 118), (184, 118), (185, 118), (185, 118), (185, 118), (186, 118), (186, 118), (186, 118), (187, 118), (187, 118), (187, 118), (188, 118), (188, 118), (189, 118), (189, 118), (190, 118), (191, 118), (191, 118), (192, 118), (192, 118), (193, 118), (193, 118), (194, 118), (195, 118), (195, 118), (196, 118), (196, 118), (197, 118), (198, 118), (199, 118), (200, 118), (201, 118), (202, 118), (203, 118), (204, 118), (205, 118), (206, 118), (207, 118), (207, 118), (208, 118), (208, 118), (209, 118), (209, 118), (210, 118), (210, 118), (211, 118), (211, 118), (211, 118), (212, 118), (212, 118), (212, 118), (213, 118), (213, 118), (213, 118), (214, 118), (214, 118), (215, 117), (215, 117), (216, 117), (216, 117), (216, 117), (216, 117), (217, 117), (217, 117), (218, 117), (218, 117), (218, 117), (219, 117), (219, 117), (220, 117), (220, 117), (220, 117), (221, 117), (221, 117), (221, 116), (222, 116), (222, 116), (223, 116), (223, 116), (224, 116), (224, 116), (225, 116), (225, 116), (225, 116), (226, 116), (226, 115), (226, 115), (227, 115), (227, 115), (228, 115), (228, 115), (228, 115), (229, 115), (229, 115), (230, 115), (230, 115), (230, 115), (231, 115), (231, 115), (232, 115), (232, 115), (233, 115), (233, 114), (234, 114), (234, 114), (235, 114), (235, 114), (237, 114), (238, 113), (239, 113), (239, 113), (240, 113), (240, 113), (241, 112), (241, 112), (242, 112), (242, 112), (242, 112), (242, 112), (242, 112), (243, 112), (243, 111), (243, 111), (244, 111), (244, 111), (245, 111), (245, 111), (245, 111), (246, 111), (246, 110), (246, 110), (247, 110), (247, 110), (247, 110), (248, 110), (248, 110), (248, 110), (248, 109), (248, 109), (248, 109), (249, 109), (249, 109), (249, 109), (249, 109), (249, 108), (250, 108), (250, 108), (250, 108), (250, 107), (251, 107), (251, 107), (251, 107), (251, 106), (252, 106), (252, 106), (252, 106), (252, 105), (253, 105), (253, 104), (254, 104), (254, 104), (254, 104), (254, 103), (255, 103), (255, 103), (255, 103), (255, 103), (255, 102), (255, 102), (256, 102), (256, 102), (256, 101), (256, 101), (256, 101), (257, 101), (257, 101), (257, 100), (257, 100), (258, 100), (258, 100), (258, 100), (259, 99), (259, 99), (260, 98), (260, 98), (261, 98), (261, 97), (262, 97), (262, 97), (263, 96), (263, 96), (264, 96), (264, 95), (265, 95), (265, 95), (266, 94), (266, 94), (266, 94), (267, 94), (267, 93), (268, 93), (268, 93), (269, 93), (269, 92), (269, 92), (270, 92), (270, 92), (270, 92), (270, 91), (271, 91), (271, 91), (271, 91), (271, 91), (272, 90), (272, 90), (272, 90), (272, 89), (273, 89), (273, 89), (273, 88), (274, 88), (274, 87), (274, 87), (275, 86), (276, 85), (276, 85), (277, 85), (277, 85), (277, 84), (277, 84), (277, 84), (278, 84), (278, 83), (278, 83), (278, 83), (278, 83), (279, 82), (279, 82), (279, 82), (280, 81), (280, 81), (281, 80), (281, 80), (282, 79), (282, 79), (283, 78), (284, 77), (285, 76), (286, 75), (287, 75), (287, 75), (288, 75), (288, 74), (288, 74), (288, 74), (288, 74), (288, 74), (289, 74), (289, 73), (289, 73), (289, 73), (289, 73), (289, 73), (289, 73), (289, 73), (289, 72), (290, 72), (290, 72), (290, 72), (290, 72), (290, 72), (290, 71), (290, 71), (290, 71), (291, 71), (291, 71), (291, 71), (291, 70), (292, 70), (292, 70), (292, 70), (292, 69), (292, 69), (293, 69), (293, 69), (293, 68), (293, 68), (293, 68), (293, 68), (293, 67), (293, 67), (293, 67), (293, 67), (293, 67), (293, 67), (293, 66), (293, 66), (293, 66), (293, 66), (293, 66), (293, 65), (293, 65), (294, 65), (294, 65), (294, 65), (294, 65), (294, 64), (294, 64), (294, 64), (294, 64), (294, 64), (294, 63), (294, 63), (294, 63), (294, 63), (294, 62), (294, 62), (294, 62), (294, 62), (294, 62), (294, 61), (294, 61), (294, 61), (294, 61), (294, 60), (295, 60), (295, 60)])
